// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToDoList.Models;

#nullable disable

namespace ToDoList.Migrations
{
    [DbContext(typeof(ToDoContext))]
    partial class ToDoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ToDoList.Models.CategoryModel", b =>
                {
                    b.Property<string>("categoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("categoryId");

                    b.ToTable("category");

                    b.HasData(
                        new
                        {
                            categoryId = "work",
                            categoryName = "Work"
                        },
                        new
                        {
                            categoryId = "home",
                            categoryName = "Home"
                        },
                        new
                        {
                            categoryId = "ex",
                            categoryName = "Exercise"
                        },
                        new
                        {
                            categoryId = "shop",
                            categoryName = "Shopping"
                        },
                        new
                        {
                            categoryId = "call",
                            categoryName = "Contact"
                        });
                });

            modelBuilder.Entity("ToDoList.Models.StatusModel", b =>
                {
                    b.Property<string>("statusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("statusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("statusId");

                    b.ToTable("status");

                    b.HasData(
                        new
                        {
                            statusId = "open",
                            statusName = "Open"
                        },
                        new
                        {
                            statusId = "closed",
                            statusName = "Completed"
                        });
                });

            modelBuilder.Entity("ToDoList.Models.ToDoModel", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("categoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("statusId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("categoryId");

                    b.HasIndex("statusId");

                    b.ToTable("toDos");
                });

            modelBuilder.Entity("ToDoList.Models.ToDoModel", b =>
                {
                    b.HasOne("ToDoList.Models.CategoryModel", "category")
                        .WithMany()
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToDoList.Models.StatusModel", "status")
                        .WithMany()
                        .HasForeignKey("statusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("status");
                });
#pragma warning restore 612, 618
        }
    }
}
